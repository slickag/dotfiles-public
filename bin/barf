#!/usr/bin/env zsh

emulate -L zsh -o no_unset -o pipe_fail -o extended_glob

zmodload zsh/system || return
zmodload -F zsh/files b:zf_mkdir b:zf_rm || return

function usage() {
  print -r -- 'usage: barf path/to/dir

Read a tar.gz archive from stdin and extract it to the
specified directory. If stdin is a tty, read from clipboard.'
}

() {
  local -i OPTIND
  local opt OPTARG
  while getopts ":h" opt; do
    case $opt in
      *h) usage; return 0;;
      \?) print -ru2 "barf: invalid option: -$OPTARG"; return 1;;
      :)  print -ru2 "barf: missing required argument: -OPTARG"; return 1;;
      +?) print -ru2 "barf: unhandled option: +$opt"; return 1;;
      *)  print -ru2 "barf: unhandled option: -$opt"; return 1;;
    esac
  done

  if [[ $OPTIND != $# || -z $1 ]]; then
    usage >&2
    return 1
  fi

  if [[ ! -t 0 ]]; then
    local in=(command cat)
  elif (( $+commands[xclip] && $#DISPLAY )); then
    local in=(command xclip -selection clipboard -out)
  else
    print -ru2 "barf: refusing to read archive contents from terminal"
    return 1
  fi

  local help tar_opt
  if help=$(command tar --help 2>&1) && [[ $help == *--warning=* ]]; then
    tar_opt=(--warning=no-unknown-keyword --no-same-owner)
  fi

  if [[ ! -e $1 ]]; then
    zf_mkdir -p -- $1 || return
  elif [[ ! -d $1 ]]; then
    print -ru2 "barf: destination exist and is not a directory: $1"
  fi

  local precmd fs
  fs="${${$(command df -P -- $1 2>/dev/null)[(f)2]}[(w)1]}" || return
  if [[ $fs == [A-Z]:(|\\) && -z $1(#qNU) ]]; then
    # Without sudo tar cannot extract to NFS if $USER isn't the default wsl user.
    precmd=sudo
  fi

  $in | command $precmd tar -C $1 $tar_opt -xzf - || return
} "$@"
